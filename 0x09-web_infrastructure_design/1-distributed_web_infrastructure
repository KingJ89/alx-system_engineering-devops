Design of Three-Server Web Infrastructure for www.foobar.com:

    User Accessing the Website:
        A user wants to visit our website, www.foobar.com, by typing the URL into their web browser and hitting enter.

    Load Balancer (HAProxy):
        We have a load balancer called HAProxy. Its job is to evenly distribute incoming web traffic among the two servers to ensure that no single server gets overwhelmed. We're adding this to improve the website's performance and reliability.

    Web Server (Nginx):
        Each server has Nginx installed, acting as the front-end web server. Nginx handles HTTP requests from clients and forwards them to the application server for processing. It's essential for serving static content efficiently and handling high traffic.

    Application Server:
        One of the servers is designated as the application server. It hosts the website's code base and handles dynamic content requests. The application server processes user input, interacts with the database, and generates personalized web pages. We're adding this to separate the application logic from the web server for better scalability and maintainability.

    Database (MySQL):
        We have a MySQL database to store and manage the website's data. It's where user accounts, posts, and other information are stored. The application server communicates with the database to retrieve and update data as needed.

    Distribution Algorithm for Load Balancer:
        HAProxy is configured with a round-robin distribution algorithm. This means it cycles through the list of servers and assigns incoming requests to each server in turn. It's a simple and fair way to distribute traffic evenly among the servers.

    Active-Active Setup with Load Balancer:
        Our setup is Active-Active, meaning both servers are actively serving traffic. Each server can handle requests independently, and the load balancer ensures that incoming traffic is evenly distributed between them. It provides redundancy and ensures high availability.

    Database Primary-Replica (Master-Slave) Cluster:
        In our database setup, we have a Primary-Replica (or Master-Slave) cluster. The Primary node is the main database server responsible for handling all write operations. The Replica node, also known as the Slave, replicates data from the Primary and serves read-only requests. This setup improves performance and provides fault tolerance.

Issues with the Infrastructure:

    Single Point of Failure (SPOF):
        The load balancer is a single point of failure. If it goes down, the entire website could become inaccessible. We can address this by adding redundancy or failover mechanisms to the load balancer setup.

    Security Issues:
        Our infrastructure lacks proper security measures, such as a firewall and HTTPS encryption. This leaves us vulnerable to cyber attacks and data breaches. We need to implement security protocols to protect user data and ensure privacy.

    No Monitoring:
        We're not monitoring the performance and health of our servers, load balancer, and database. Without monitoring, we may not detect issues or performance bottlenecks until they affect the website's availability and user experience. Implementing monitoring tools can help us proactively identify and address potential issues.

https://drive.google.com/file/d/1KdGizvOUr7HM_sWNbsFW3yz4S84ivLO0/view?usp=drive_link


    User Access: The flow starts when a user accesses www.foobar.com in their web browser.
    Load Balancer (HAProxy): The request goes through the load balancer, which distributes it to one of the two web servers based on the configured algorithm (round-robin in this case).
    Web Servers (Nginx): Each web server receives incoming requests from the load balancer. Nginx handles these requests and forwards them to the application server for processing.
    Application Servers: The application server executes the website's code base, interacts with the database as needed, and generates dynamic content for the user.
    Database (MySQL): The application server communicates with the MySQL database to retrieve or update data, such as user accounts, posts, and other information.